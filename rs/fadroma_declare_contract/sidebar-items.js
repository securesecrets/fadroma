initSidebarItems({"macro":[["bind_chain","A binding that exposes the default CosmWasm entry points. This lets you compile a WASM contract to a form that runs on a SecretNetwork blockchain."],["bind_js","A binding that exposes one or more wrapped Rust structs to JavaScript. This lets you load a WASM contract in a browser and talk to it from JS."],["contract","Define a smart contract"],["define_init_message","Define instantiation API. Normally called by `contract!` within the auto-generated `mod msg`."],["define_q_messages","Define query API. Normally called by `contract!` within the auto-generated `mod msg`."],["define_state_singleton","Define the state singleton."],["define_tx_messages","Define transaction API. Normally called by `contract!` within the auto-generated `mod msg`."],["implement_init","Instatiation. Either defines or imports an `InitMsg`, and hooks up your init logic to it. Function body must return the initial value of `State`."],["implement_queries","Query implementations."],["implement_transactions","Transaction implementations"],["message","Define a struct that implements the necessary traits to be used as message. (de/serialization, schema generation, cloning, debug printing, equality comparison)"],["messages","Define an enum that implements the necessary traits to be used as message. (de/serialization, schema generation, cloning, debug printing, equality comparison)"],["prelude","Import commonly used definitions that need to be available everywhere in the contract"]],"mod":[["scrt_contract","Fadroma SCRT Contract macro."],["scrt_contract_api","Macros that help with defining the contractâ€™s API."],["scrt_contract_binding","Macros are truly a blessing in the disguise of a curse."],["scrt_contract_harness",""],["scrt_contract_impl",""],["scrt_contract_state","Inefficient, use <../fadroma_scrt_storage> instead"]]});